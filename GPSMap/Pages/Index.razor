@page "/"
@using BlazorPro.Spinkit

<!--From: https://demos.telerik.com/blazor-ui/map/overview -->


<style>
    .custom-marker-class {
        background-image: url(/images/sunny.png);
        padding-top: 20px;
        text-align: center;
        background-size: 20px;
        width: 20px;
        background-repeat: no-repeat;
        display: inline-table;
        font-size: 12px;
    }

    .second-custom-marker-class {
        background-image: url(https://demos.telerik.com/kendo-ui/content/dataviz/chart/images/rainy.png);
        padding-top: 65px;
        text-align: center;
        background-size: 65px;
        width: 63px;
        background-repeat: no-repeat;
        display: inline-table;
        font-size: 12px;
    }
</style>

<h1>GPS Map with IoT Hub</h1>

@if(!Loading)
{
<table>
    <tr>
        <td>Latitude:</td>
        <td>@Center[0]</td>
    </tr>
    <tr>
        <td>Longitude:</td>
        <td>@Center[1]</td>
    </tr>
    <tr>
        <td><button @onclick=@SendCommand>Send</button></td>
        <td><TelerikTextBox @bind-Value="@Command" Placeholder="Start,Stop,Reset,Set-Period" /></td>
    </tr>
    <tr>
        <td><button @onclick="() => {zoom++;}">&nbsp;&nbsp;&nbsp+&nbsp;&nbsp;&nbsp</button></td>
        <td><button @onclick="() => {zoom--;}">&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;</button></td>
    </tr>
</table>





<TelerikMap Center="@Center"
            MinZoom="3"
            OnClick="@OnMapZoom"
            Zoom="@zoom">
    <MapLayers>
        <MapLayer Type="@MapLayersType.Tile"
                  Attribution="@Attribution"
                  Subdomains="@Subdomains"
                  UrlTemplate="@UrlTemplate">
        </MapLayer>

        <MapLayer Type="@MapLayersType.Marker"
                  Data="@MarkerData"
                  LocationField="@nameof(MarkerModel.LatLng)"
                  TitleField="@nameof(MarkerModel.Address)">
            <MapLayerMarkerSettings>
                <MapLayerMarkerSettingsTooltip>
                    <Template>
                        @{
                            var dataItem = context.DataItem as MarkerModel;
                        }

                        <div>@dataItem?.Address</div>
                    </Template>
                </MapLayerMarkerSettingsTooltip>
            </MapLayerMarkerSettings>
        </MapLayer>
                <MapLayer Type="@MapLayersType.Marker"
                  Data="@MarkerDataGPSPoint"
                  LocationField="@nameof(MarkerModel.LatLng)"
                  TitleField="@nameof(MarkerModel.Address)">
                  <MapLayerMarkerSettings Template="<span class='custom-marker-class'>#= dataItem.Title #</span>"/>              
        </MapLayer>
    </MapLayers>
</TelerikMap>
}
else
{
    <p><em>Loading...</em></p>
     <Pulse />
}

@code {
    private bool Loading { get { return ReadD2cMessages.GPSCls.Loading; } }
    private const int lat = 0;
    private const int lon = 1;
    private string Command = "";

    async Task SendCommand()
    {
        await GPSMap.Data.SendCloud2DeviceMsgs.Invoke(Command);
    }

    public string[] Subdomains { get; set; } = new string[] { "a", "b", "c" };
    public string UrlTemplate { get; set; } = "https://#= subdomain #.tile.openstreetmap.org/#= zoom #/#= x #/#= y #.png";
    public string Attribution { get; set; } = "&copy; <a href='https://osm.org/copyright'>OpenStreetMap contributors</a>";
    public double[] Center { get; set; } = new double[] { 47.6062, -122.3321 };
    public double[] Centeralt { get; set; } = new double[] { 0, 0 };



    List<double[]> latlongs1 = new List<double[]>();
    List<double[]>  latlongs2 = new List<double[]>();


    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            GPSMap.Data.SendCloud2DeviceMsgs.Setup();
            await ReadD2cMessages.GPSCls.StartMonitor(SetCoords); //}
 
        }

    }

    // Just to  make  OnInitializedAsync async
    async Task Delay(int del)
    {
        await Task.Delay(del);
    }

    protected override async Task  OnInitializedAsync()
    {
        _zoom = 16;
        await Delay(100);
    }




    public int _zoom = 16;
    public int zoom
    {
        get
        {
            return _zoom;
        }
        set
        {
            if (value > 19)
                _zoom = 19;
            else if (value < 0)
                _zoom = 0;
            else
                _zoom = value;

        }
    }

    /// <summary>
    /// This gets updated (moved) by GPS
    /// </summary>
    public List<MarkerModel> MarkerDataGPSPoint { get; set; } = new List<MarkerModel>()
    {
        // Roving
        new MarkerModel()
        {
            LatLng = new double[] { 42.4906, -71.2760 },
            Address = "Center1, Center2",
        },
    };

    /// <summary>
    /// Fixed points on the map
    /// </summary>
    public List<MarkerModel> MarkerData { get; set; } = new List<MarkerModel>()
    {
        // North America
        new MarkerModel()
        {
            LatLng = new double[] { 42.4906, -71.2760 },
            Address = "Bedford, MA",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 47.6062, -122.3321 },
            Address = "Seattle, WA",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 43.0731, -89.4012 },
            Address = "Madison, WI",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 34.0754, -84.2941 },
            Address = "Alpharetta, GA",
        },

        // South America
        new MarkerModel()
        {
            LatLng = new double[] { -23.5558, -46.6396 },
            Address = "Sao Paulo, Brazil",
        },

        // Europe
        new MarkerModel()
        {
            LatLng = new double[] { 42.6977, 23.3219 },
            Address = "Sofia, Bulgaria",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 40.4319, -3.6649 },
            Address = "Madrid, Spain",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 52.6638, -8.6267 },
            Address = "Limerick, Ireland",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 45.4720, 9.1920 },
            Address = "Milan, Italy",
        },

        // Asia
        new MarkerModel()
        {
            LatLng = new double[] { 12.9662, 77.6068 },
            Address = "Bangalore, India",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 28.5347, 77.2602 },
            Address = "New Delhi, India",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 35.6500, 139.7307 },
            Address = "Tokyo, Japan",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 1.2833, 103.8496 },
            Address = "Singapore, Singapore",
        },

        // Australia
        new MarkerModel()
        {
            LatLng = new double[] { -37.8152, 144.9639 },
            Address = "Melbourne, Australia",
        },
        new MarkerModel()
        {
            LatLng = new double[] { -37.8152, 144.9639 },
            Address = "Point, World",
        },
    };

    public class MarkerModel
    {
        public double[] LatLng { get; set; }
        public string Address { get; set; }
    }



    public void OnMapZoom(MapClickEventArgs args)
    {
        var location = args.Location;
        var eventArgs = args.EventArgs as MouseEventArgs;

        if (eventArgs != null)
        {
            if (!eventArgs.ShiftKey)
            {
                zoom++;
            }
            else
            {
                zoom--;
            }
            StateHasChanged();
        }

    }

    /// <summary>
    /// Delegate to IoT HUb software
    /// </summary>
    /// <param name="coords">double[2]:lattitue,longitude</param>
    int SetCoords(double[] coords)
    {
        Center = coords;
        MarkerDataGPSPoint[0].LatLng = Center;
        MarkerDataGPSPoint[0].Address = $"{MarkerDataGPSPoint[0].LatLng[0]},{MarkerDataGPSPoint[0].LatLng[1]}";

        StateHasChanged();          
        return 0;
    }
}

    
