@page "/"
@using BlazorPro.Spinkit

<!--From: https://demos.telerik.com/blazor-ui/map/overview -->


<style>
    .custom-marker-class {
        background-image: url(/images/sunny.png);
        padding-top: 20px;
        text-align: center;
        background-size: 20px;
        width: 20px;
        background-repeat: no-repeat;
        display: inline-table;
        font-size: 12px;
    }

    .second-custom-marker-class {
        background-image: url(https://demos.telerik.com/kendo-ui/content/dataviz/chart/images/rainy.png);
        padding-top: 65px;
        text-align: center;
        background-size: 65px;
        width: 63px;
        background-repeat: no-repeat;
        display: inline-table;
        font-size: 12px;
    }
</style>

<h1>GPS Map with IoT Hub</h1>


<table>
    <tr>
        <td align="right"><b><i>Lattitude:</i></b></td>
        <td>@Center[0]</td>
        <td align ="right"><b><i>Longitude:</i></b></td>
        <td>@Center[1]</td>
    </tr>
    <tr>
        <td align ="right"><b><i>Date:</i></b></td>
        <td>@TimeStamp.ToShortDateString()</td>
        <td align ="right"><b><i>Time:</i></b></td>
        <td>@TimeStamp.ToShortTimeString()</td>
    </tr>
    <tr>
        <td><button @onclick=@SendCommand>Send</button></td>
        <td colspan="3"><TelerikTextBox @bind-Value="@Command" Placeholder="Start,Stop,Reset,Set-Period" /></td>
    </tr>
    <tr>
        @if ( (appInfo.appState != ReadD2cMessages.AppState.running) && (appInfo.appState != ReadD2cMessages.AppState.loading))
        {
            @if (appInfo.appState != ReadD2cMessages.AppState.playing)
            {
                <td><button @onclick="async () => { await Runn(true);}">START</button></td>
            }
            @if (appInfo.dataState == ReadD2cMessages.DataState.loaded)
            {
                @if (appInfo.appState != ReadD2cMessages.AppState.playing)
                {
                    <td><button @onclick="async () => { await Playy(true);}">PLAY</button></td>
                }
                else
                {
                    <td><button @onclick="async () => { await Playy(false);}">STOP</button></td>
                }   
            }
        }
        else
        {
            <td><button @onclick="async () => {await Runn(false);}">STOP</button></td>
        }
    </tr>
    <tr>
        <td colspan="4"><b><i>AppMode:&nbsp;</i></b>
         @(IappMode== 0 ? "No selection yet" : AppModeOptions[IappMode - 1].Description)</td>
    </tr>
    @if (appInfo.appState == ReadD2cMessages.AppState.none)
    {
        <tr>
            <td colspan="2">
                <TelerikRadioGroup Data="@AppModeOptions"
                                   Value="@IappMode"
                                   ValueChanged="@( (int v) => ValueChangedHandler(v) )"
                                   ValueField="@nameof(AppModeModel.GenderId)"
                                   TextField="@nameof(AppModeModel.Description)">
                </TelerikRadioGroup>
            </td>
        </tr>
    }
    @if ((appInfo.appMode == ReadD2cMessages.AppMode.from)|| (appInfo.appMode == ReadD2cMessages.AppMode.fromto))
    {
        <tr>
            <td colspan="4">
                <label>Selected start time:</label>@startTime
            </td>
        </tr>
    }
    @if  (appInfo.appMode == ReadD2cMessages.AppMode.fromto)
    {
        <tr>
            <td colspan="4">
                <label>Selected end time:</label>@endTime
            </td>.
        </tr>
    }
</table>
@if(appInfo.appState ==  ReadD2cMessages.AppState.none)
{
    @if ((appInfo.appMode == ReadD2cMessages.AppMode.from)|| (appInfo.appMode == ReadD2cMessages.AppMode.fromto))
    {
        <br />

        <TelerikDateTimePicker Min="@Min" Max="@Max" @bind-Value="@startTime"
                               Format="dd MMM yyyy HH:mm:ss" Width="250px"></TelerikDateTimePicker>
    }
    @if (appInfo.appMode == ReadD2cMessages.AppMode.fromto)
    {
        
        <br />

        <TelerikDateTimePicker  Min="@startTime" Max="@Max" @bind-Value="@endTime"
                               Format="dd MMM yyyy HH:mm:ss" Width="250px"></TelerikDateTimePicker>
    }
}
    <br />


@if(appInfo.appState== ReadD2cMessages.AppState.loading)
{
    <p><em>Loading...</em></p>
    <Pulse />
    <p>Note: Reading historic Telemetry then waiting to first send which can be up to 1 minute.</p>
}

@if (MapIsVisble)
{
    <tr>
        <td><button @onclick="() => {zoom++;}">&nbsp;&nbsp;&nbsp+&nbsp;&nbsp;&nbsp</button></td>
        <td><button @onclick="() => {zoom--;}">&nbsp;&nbsp;&nbsp;--&nbsp;&nbsp;&nbsp;</button></td>
    </tr>
<TelerikMap Center="@Center"
            MinZoom="3"
            OnClick="@OnMapZoom"
            Zoom="@zoom">
    <MapLayers>
        <MapLayer Type="@MapLayersType.Tile"
                  Attribution="@Attribution"
                  Subdomains="@Subdomains"
                  UrlTemplate="@UrlTemplate">
        </MapLayer>

        <MapLayer Type="@MapLayersType.Marker"
                  Data="@MarkerData"
                  LocationField="@nameof(MarkerModel.LatLng)"
                  TitleField="@nameof(MarkerModel.Address)">
            <MapLayerMarkerSettings>
                <MapLayerMarkerSettingsTooltip>
                    <Template>
                        @{
                            var dataItem = context.DataItem as MarkerModel;
                        }

                        <div>@dataItem?.Address</div>
                    </Template>
                </MapLayerMarkerSettingsTooltip>
            </MapLayerMarkerSettings>
        </MapLayer>
                <MapLayer Type="@MapLayersType.Marker"
                  Data="@MarkerDataGPSPoint"
                  LocationField="@nameof(MarkerModel.LatLng)"
                  TitleField="@nameof(MarkerModel.Address)">
                  <MapLayerMarkerSettings Template="<span class='custom-marker-class'>#= dataItem.Title #</span>"/>              
        </MapLayer>
    </MapLayers>
</TelerikMap>
}



@code {
    [CascadingParameter]
    public DialogFactory Dialogs { get; set; }

    public void ShowAlert(string msg)
    {
        Dialogs.AlertAsync(msg).GetAwaiter();

        System.Diagnostics.Debug.WriteLine(msg);
    }
    DateTime startTime
    {
        get
        {
            return ReadD2cMessages.GPSCls.startTime;
        }
        set
        {
            if (value.Ticks<endTime.Ticks)
                ReadD2cMessages.GPSCls.startTime = value;
            else
            {
                if(appInfo.appMode == ReadD2cMessages.AppMode.fromto)
                    ShowAlert("Start time needs to be < end time.");
            }
        }
    }
    DateTime endTime
    {
        get
        {
            return ReadD2cMessages.GPSCls.endTime;
        }
        set
        {
            if (value.Ticks > startTime.Ticks)
                ReadD2cMessages.GPSCls.endTime = value;
            else
            {
                ShowAlert("End time needs to be > start time.");
            }
        }
    }

    async Task Playy(bool playMode)
    {
        if (appInfo.dataState != ReadD2cMessages.DataState.loaded)
            return;
        if (playMode)
        {
            if (appInfo.appState == ReadD2cMessages.AppState.none)
            {
                await ReadD2cMessages.GPSCls.Playy(true);
            }
        }
        else
        {
            if (appInfo.appState == ReadD2cMessages.AppState.playing)
            {
                await ReadD2cMessages.GPSCls.Playy(false);
            }
        }
    }




    async Task Runn(bool runMode)
    {
        if (runMode)
        {
            if (appInfo.appState == ReadD2cMessages.AppState.none)
            {
                await ReadD2cMessages.GPSCls.StartMonitor(SetCoords);
            }
        }
        else
        { 
            if ((appInfo.appState == ReadD2cMessages.AppState.running) || (appInfo.appState == ReadD2cMessages.AppState.loading))
            {
                StateHasChanged();
                ReadD2cMessages.GPSCls.StopMonitor();
                StateHasChanged();
            }
        }
    }


    public DateTime Min = new DateTime(2023, 8, 1, 0, 0, 0);
    public DateTime Max = new DateTime(2025, 1, 1, 0, 0, 0);

    TelerikRadioGroup<AppModeModel, int?> RadioGroupRef { get; set; }

    private ReadD2cMessages.AppInfo appInfo
    {
        get { return ReadD2cMessages.GPSCls.appInfo; }
        set { ReadD2cMessages.GPSCls.appInfo = value; }
    }

    int IappMode { get; set; } = 0;

    List<AppModeModel> AppModeOptions { get; set; } = new List<AppModeModel>
    {
        new AppModeModel { GenderId = 1, Description = "Live" },
        new AppModeModel { GenderId = 2, Description = "Previous From to Live" },
        new AppModeModel { GenderId = 3, Description = "Previous From - To" },
    };

    public class AppModeModel
    {
        public int GenderId { get; set; }
        public string Description { get; set; } = "";
    }

    void ValueChangedHandler(int newValue)
    {
        IappMode = newValue;
        appInfo.appMode = (ReadD2cMessages.AppMode)newValue;
        System.Diagnostics.Debug.WriteLine($"New App Mode: {appInfo.appMode}");
        StateHasChanged();
    }

    //public bool Loading { get { return ReadD2cMessages.GPSCls.Loading; } }
    private const int lat = 0;
    private const int lon = 1;
    private string Command = "";

    private DateTime TimeStamp = DateTime.Now;


    async Task SendCommand()
    {
        await GPSMap.Data.SendCloud2DeviceMsgs.Invoke(Command);
    }

    public string[] Subdomains { get; set; } = new string[] { "a", "b", "c" };
    public string UrlTemplate { get; set; } = "https://#= subdomain #.tile.openstreetmap.org/#= zoom #/#= x #/#= y #.png";
    public string Attribution { get; set; } = "&copy; <a href='https://osm.org/copyright'>OpenStreetMap contributors</a>";
    public double[] Center { get; set; } = new double[] { 47.6062, -122.3321 };
    public double[] Centeralt { get; set; } = new double[] { 0, 0 };



    List<double[]> latlongs1 = new List<double[]>();
    List<double[]> latlongs2 = new List<double[]>();


    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (first)
        {
            GPSMap.Data.SendCloud2DeviceMsgs.Setup();


        }

    }

    // Just to  make  OnInitializedAsync async
    async Task Delay(int del)
    {
        await Task.Delay(del);
    }

    protected override async Task  OnInitializedAsync()
    {
        _zoom = 16;
        ReadD2cMessages.GPSCls.appInfo = new ReadD2cMessages.AppInfo();
        MapIsVisble = true;
        await Delay(100);
    }




    public int _zoom = 16;
    public int zoom
    {
        get
        {
            return _zoom;
        }
        set
        {
            if (value > 19)
                _zoom = 19;
            else if (value < 0)
                _zoom = 0;
            else
                _zoom = value;

        }
    }

    /// <summary>
    /// This gets updated (moved) by GPS
    /// </summary>
    public List<MarkerModel> MarkerDataGPSPoint { get; set; } = new List<MarkerModel>()
    {
        // Roving
        new MarkerModel()
        {
            LatLng = new double[] { 42.4906, -71.2760 },
            Address = "Center1, Center2",
        },
    };

    /// <summary>
    /// Fixed points on the map
    /// </summary>
    public List<MarkerModel> MarkerData { get; set; } = new List<MarkerModel>()
    {
        // North America
        new MarkerModel()
        {
            LatLng = new double[] { 42.4906, -71.2760 },
            Address = "Bedford, MA",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 47.6062, -122.3321 },
            Address = "Seattle, WA",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 43.0731, -89.4012 },
            Address = "Madison, WI",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 34.0754, -84.2941 },
            Address = "Alpharetta, GA",
        },

        // South America
        new MarkerModel()
        {
            LatLng = new double[] { -23.5558, -46.6396 },
            Address = "Sao Paulo, Brazil",
        },

        // Europe
        new MarkerModel()
        {
            LatLng = new double[] { 42.6977, 23.3219 },
            Address = "Sofia, Bulgaria",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 40.4319, -3.6649 },
            Address = "Madrid, Spain",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 52.6638, -8.6267 },
            Address = "Limerick, Ireland",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 45.4720, 9.1920 },
            Address = "Milan, Italy",
        },

        // Asia
        new MarkerModel()
        {
            LatLng = new double[] { 12.9662, 77.6068 },
            Address = "Bangalore, India",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 28.5347, 77.2602 },
            Address = "New Delhi, India",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 35.6500, 139.7307 },
            Address = "Tokyo, Japan",
        },
        new MarkerModel()
        {
            LatLng = new double[] { 1.2833, 103.8496 },
            Address = "Singapore, Singapore",
        },

        // Australia
        new MarkerModel()
        {
            LatLng = new double[] { -37.8152, 144.9639 },
            Address = "Melbourne, Australia",
        },
        new MarkerModel()
        {
            LatLng = new double[] { -37.8152, 144.9639 },
            Address = "Point, World",
        },
    };

    public class MarkerModel
    {
        public double[] LatLng { get; set; }
        public string Address { get; set; }
    }



    public void OnMapZoom(MapClickEventArgs args)
    {
        var location = args.Location;
        var eventArgs = args.EventArgs as MouseEventArgs;

        if (eventArgs != null)
        {
            if (!eventArgs.ShiftKey)
            {
                zoom++;
            }
            else
            {
                zoom--;
            }
            StateHasChanged();
        }

    }

    bool MapIsVisble = true;
    /// <summary>
    /// Delegate to IoT HUb software
    /// </summary>
    /// <param name="coords">double[2]:lattitue,longitude</param>
    int SetCoords(ReadD2cMessages.Telemetry telem)
    {
        if (!MapIsVisble)
        {
            MapIsVisble = true;
            StateHasChanged();
        }
        //Loading = false and Running=true here
        double[] coords = new double[] { telem.lat, telem.lon };
        TimeStamp = telem.TimeStamp;
        Center = coords;
        MarkerDataGPSPoint[0].LatLng = Center;
        MarkerDataGPSPoint[0].Address = $"{MarkerDataGPSPoint[0].LatLng[0]},{MarkerDataGPSPoint[0].LatLng[1]}";

        StateHasChanged();
        return 0;
    }
}

    
